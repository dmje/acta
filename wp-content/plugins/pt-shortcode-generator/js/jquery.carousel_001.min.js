(function (a) {
    a.fn.carousel = function (c) {
        var e = {
            auto: true,
            delay: 3000,
            duration: 600,
            video_autoplay: false
        }, d = a.extend({}, e, c);
        return this.each(function () {
            b(this, d)
        })
    };

    function b(d, c) {
        return this instanceof b ? this.init(d, c) : new b(d, c)
    }
    a.extend(b.prototype, {
        container: null,
        options: null,
        image_width: 0,
        image_outer_width: 0,
        active_image_width: 0,
        active_image_outer_width: 0,
        items_num: 0,
        first_visible_item: 0,
        current_active: 0,
        visible_items: 3,
        total_width: 0,
        caption_height: 0,
        autoscroll_direction: "left",
        pause_autoscroll: false,
        loopingLeft: false,
        loopingRight: false,
        animating: false,
        videoReady: false,
        init: function (d, c) {
            this.container = d;
            this.options = c;
            if (!this.options.type) {
                if (a(this.container).hasClass("carousel-type-full")) {
                    this.options.type = "full"
                }
                if (a(this.container).hasClass("carousel-type-two-thirds")) {
                    this.options.type = "two-thirds"
                }
                if (a(this.container).hasClass("carousel-type-static")) {
                    this.options.type = "full"
                }
                if (a(this.container).hasClass("carousel-type-mobile")) {
                    this.options.type = "mobile"
                }
            } else {
                a(this.container).addClass("carousel-type-" + this.options.type)
            }
            if (a(this.container).hasClass("carousel-auto-scroll")) {
                this.options.auto = true
            } else {
                if (a(this.container).hasClass("carousel-auto-scroll-disabled")) {
                    this.options.auto = false
                }
            }
            if (a(this.container).hasClass("carousel-video-auto-play")) {
                this.options.video_autoplay = true
            }
            this.items_num = a("li", this.container).size();
            switch (this.options.type) {
                case "full":
                    this.visible_items = 4;
                    break;
                case "two-thirds":
                    this.visible_items = (this.items_num >= 2 ? 2 : this.items_num);
                    break;
                case "mobile":
                    this.visible_items = 1;
                    break;
                case "static":
                    this.visible_items = 1;
                    break
            }
            this.image_width = a("li", this.container).not(a(".active"), this.container).eq(0).innerWidth();
            this.image_outer_width = a("li", this.container).not(a(".active"), this.container).eq(0).outerWidth();
            this.active_image_width = a("li.active", this.container).innerWidth();
            this.active_image_outer_width = a("li.active", this.container).outerWidth();
            this.first_visible_item = a("li.carousel-first-visible", this.container).index();
            this.caption_height = a(".carousel-item-caption", this.container).first().height();
            if (this.first_visible_item === -1) {
                this.first_visible_item = 0
            }
            this.current_active = a("li.active", this.container).index();
            this.visible_active_position = this.current_active - this.first_visible_item;
            this.addWrapper();
            this.setWidth();
            this.displayFirstVisible();
            if (this.options.type !== "static") {
                this.addControls()
            }
            this.setupEvents();
            this.setupImagePositions();
            this.setupVideos();
            this.addOverlays();
            if (this.options.auto && ((this.options.type !== "static") && (this.items_num > this.visible_items))) {
                this.addAutoscroll()
            }
        },
        addWrapper: function () {
            a("ul", this.container).wrap('<div class="carousel-wrapper" />');
            a(this.container).css({
                overflow: "visible"
            })
        },
        setWidth: function () {
            this.total_width = (this.image_outer_width * this.items_num) + (this.active_image_outer_width - this.image_outer_width);
            a("ul", this.container).width(this.total_width)
        },
        displayFirstVisible: function () {
            var d, c;
            if ((this.first_visible_item + this.visible_items) < this.items_num) {
                d = (this.image_outer_width * this.first_visible_item);
                a("ul", this.container).css("left", - d)
            } else {
                c = this.total_width - ((this.visible_items * this.image_outer_width) + (this.active_image_outer_width - this.image_outer_width));
                a("ul", this.container).css("left", - c)
            }
        },
        addControls: function () {
            var c;
            if (this.items_num > this.visible_items) {
                c = '<div class="carousel-nav">';
                c += ' <a href="#" class="control left" title="Scroll left">&lt;</a>';
                c += ' <a href="#" class="control right" title="Scroll right">&gt;</a>';
                c += "</div>";
                a(c).appendTo(this.container)
            }
        },
        setupEvents: function () {
            var c = this;
            a("li", this.container).live("click", c, this.event_clickItem);
            a("li .overlay", this.container).live("click", c, this.event_clickItemOverlay);
            a("li", this.container).live("mouseover", c, this.event_mouseoverItem);
            a("li", this.container).live("mouseout", c, this.event_mouseoutItem);
            a(".carousel-nav", this.container).live("mouseover", c, this.event_mouseoverItem);
            a(".carousel-nav", this.container).live("mouseout", c, this.event_mouseoutItem);
            a(".carousel-nav .control.left", this.container).live("click", c, this.event_clickControlLeft);
            a(".carousel-nav .control.right", this.container).live("click", c, this.event_clickControlRight)
        },
        setupImagePositions: function () {
            var c = this;
            a("li img", c.container).each(function (d) {
                if (a(this).data("x") && !a(this).parents("li").hasClass("active")) {
                    a(this).css("left", - a(this).data("x"))
                }
            })
        },
        addOverlays: function () {
            var c = this;
            a("li", this.container).each(function () {
                //a(this).append('<div class="overlay"></div>')
				a(this).append('<div></div>')
            });
            this.setOverlayDirections()
        },
        setOverlayDirections: function () {
            var c = this;
            a("li .overlay.left", c.container).removeClass("left");
            a("li .overlay.right", c.container).removeClass("right");
            
			a("li .overlay", c.container).each(function (d) {
			   
			  	//alert("d--"+d)
			   //alert("c--"+c.current_active)
			   
			   if (d < c.current_active) {
                    a(this).addClass("left")
                } else {
                    if (d > c.current_active) {
                        a(this).addClass("right")
                    }
                }
            })
        },
        addAutoscroll: function () {
            var c = this;
            setInterval(function () {
                c.event_autoscroll(c)
            }, c.options.delay)
        },
        setupVideos: function () {
            var c = this,
                e, d;
            c.video_type = "jwplayer";
            if (c.video_type == "jwplayer") {
                a("video", c.container).each(function (g, f) {
                    g = a(f).attr("id");
                    d = a(f, c.container).parents("li");
                    d.addClass("video-container");
                    jwplayer(g).setup({
                        flashplayer: "/resources/js/jwplayer/player.swf",
                        skin: "/resources/js/jwplayer/skins/newtubedark/newtubedark.zip",
                        modes: [{
                            type: "html5"
                        }, {
                            type: "flash",
                            src: "/resources/js/jwplayer/player.swf"
                        }, {
                            type: "download"
                        }],
                        events: {
                            onReady: function () {
                                if (c.options.video_autoplay && d.hasClass("active")) {
                                    jwplayer(g).play();
                                    c.videoReady = true
                                }
                            }
                        }
                    });
                    if (!d.hasClass("active")) {
                        jwplayer(g).getPlugin("controlbar").hide()
                    }
                })
            } else {
                if (c.video_type == "youtube") {
                    a("iframe", c.container).each(function (g, f) {
                        d = a(f, c.container).parents("li");
                        d.addClass("video-container")
                    })
                }
            }
        },
        setActive: function (c) {
            var e = (this.active_image_width - this.image_width) / 2,
                g, d = this;
            if (this.video_type == "jwplayer") {
                if (a(".active.video-container", this.container).length) {
                    g = a(".active.video-container div", this.container).attr("id");
                    jwplayer(g).getPlugin("controlbar").hide();
                    jwplayer(g).getPlugin("dock").show();
                    jwplayer(g).stop()
                }
            } else {
                if (this.video_type == "youtube") {
                    if (a(".active.video-container", this.container).length) {
                        g = a(".active.video-container", this.container).children().attr("id");
                        var f = new YT.Player("player");
                        f.pauseVideo()
                    }
                }
            }
            if (a(".active img", this.container).data("x")) {
                e = a(".active img", this.container).data("x")
            }
            a(".active img", this.container).animate({
                left: -e
            }, this.options.duration);
            a(".active", this.container).animate({
                width: this.image_width
            }, this.options.duration).removeClass("active");
            a("li .overlay.left", this.container).removeClass("left");
            a("li .overlay.right", this.container).removeClass("right");
            a("img", c).animate({
                left: 0
            }, this.options.duration);
            a(c).animate({
                width: this.active_image_width
            }, this.options.duration).addClass("active").find(".overlay").removeClass("right").removeClass("left");
            a(".carousel-item-caption", c).css({
                height: 0
            }).animate({
                height: "+=" + this.caption_height
            }, this.options.duration);
            if (this.video_type == "jwplayer") {
                if (a(".active.video-container", this.container).length) {
                    g = a(".active.video-container div", this.container).children().attr("id");
                    jwplayer(g).getPlugin("controlbar").show()
                }
            }
            this.current_active = a("li.active", this.container).index();
            this.visible_active_position = this.current_active - this.first_visible_item;
            d.setOverlayDirections()
        },
        loopItemLeft: function (j) {
            var g = this,
                h = g.items_num - 1,
                f = g.image_outer_width,
                e = g.active_image_outer_width - g.image_outer_width,
                d, i, c;
            if (!g.loopingLeft) {
                g.loopingLeft = 1
            } else {
                g.loopingLeft++
            }
            d = g.total_width + (g.image_outer_width * g.visible_items) + e;
            a("ul", g.container).width(d);
            a("ul", g.container).css({
                left: -f
            });
            c = a("ul", g.container).children().eq(h).clone();
            c.prependTo(a("ul", g.container)).addClass("cloned");
            g.animating = true;
            a("ul", g.container).animate({
                left: "+=" + f
            }, g.options.duration, function () {
                g.animating = false;
                if (g.loopingLeft === g.visible_items) {
                    f = (g.total_width - (g.image_outer_width * g.visible_items) - e);
                    a("ul", g.container).css({
                        left: -f,
                        position: "absolute"
                    });
                    a("ul", g.container).width(g.totalWidth);
                    a("ul .cloned", g.container).remove();
                    g.current_active = g.items_num - g.visible_items + g.visible_active_position;
                    i = a("ul li", g.container).eq(g.current_active);
                    a("img", i).css({
                        left: 0
                    });
                    a(i).css({
                        width: g.active_image_width
                    }).addClass("active");
                    g.first_visible_item = g.items_num - g.visible_items;
                    g.loopingLeft = false;
                    g.setOverlayDirections()
                }
            })
        },
        rewindItemLeft: function (g) {
            var d = this,
                f, e, c;
            if (d.loopingLeft) {
                f = d.image_outer_width;
                d.animating = true;
                a("ul", d.container).animate({
                    left: "-=" + f
                }, d.options.duration, function () {
                    d.animating = false;
                    e = a("ul", d.container).children().first();
                    c = e.hasClass("cloned");
                    if (c) {
                        e.remove();
                        a("ul", d.container).css({
                            left: 0
                        });
                        d.first_visible_item = 0;
                        d.loopingLeft--;
                        d.current_active--;
                        if (!a("ul", d.container).has(".cloned")) {
                            d.loopingLeft = false
                        }
                        d.setOverlayDirections()
                    }
                })
            }
        },
        loopItemRight: function (i) {
            var f = this,
                h = -f.image_outer_width,
                e = f.active_image_outer_width - f.image_outer_width,
                d, c, g;
            f.loopingRight = true;
            d = f.total_width + (f.image_outer_width * f.visible_items) + e;
            a("ul", f.container).width(d);
            c = a("ul", f.container).children().eq(i).clone();
            c.appendTo(a("ul", f.container)).addClass("cloned");
            f.animating = true;
            a("ul", f.container).animate({
                left: "+=" + h
            }, f.options.duration, function () {
                f.animating = false;
                if (i === (f.visible_items - 1)) {
                    a("ul", f.container).css({
                        left: 0,
                        position: "absolute"
                    });
                    a("ul", f.container).width(f.totalWidth);
                    a("ul .cloned", f.container).remove();
                    g = a("ul li", f.container).eq(f.visible_active_position);
                    a("img", g).css({
                        left: 0
                    });
                    a(g).css({
                        width: f.active_image_width
                    }).addClass("active");
                    f.current_active = f.visible_active_position;
                    f.first_visible_item = 0;
                    f.loopingRight = false;
                    f.setOverlayDirections()
                }
            });
            if (f.loopingRight) {
                f.first_visible_item++
            }
        },
        rewindItemRight: function (g) {
            var e = this,
                f, d, c;
            if (e.loopingRight) {
                f = -e.image_outer_width;
                e.animating = true;
                a("ul", e.container).animate({
                    left: "-=" + f
                }, e.options.duration, function () {
                    e.animating = false;
                    d = a("ul", e.container).children().last();
                    c = d.hasClass("cloned");
                    if (c) {
                        d.remove();
                        e.first_visible_item--;
                        if ((e.first_visible_item + e.visible_items) === e.items_num) {
                            e.loopingRight = false
                        }
                        e.setOverlayDirections()
                    }
                })
            }
        },
        do_moveLeft: function () {
            var e = this,
                d, c;
            if (!e.animating) {
                d = e.items_num - e.first_visible_item;
                if (e.first_visible_item === 0 || e.loopingLeft) {
                    e.loopItemLeft(d)
                } else {
                    if (e.loopingRight) {
                        d = (e.first_visible_item + e.visible_items) - e.items_num;
                        e.rewindItemRight(d)
                    } else {
                        e.animating = true;
                        a("ul", e.container).animate({
                            left: "+=" + e.image_outer_width
                        }, e.options.duration, function () {
                            e.animating = false
                        });
                        e.first_visible_item--
                    }
                }
                c = e.current_active - 1;
                if (e.loopingLeft) {
                    c = e.current_active
                }
                e.setActive(a("li", e.container).eq(c))
            }
        },
        do_moveRight: function () {
            var f = this,
                e, d, c;
            if (!f.animating) {
                e = f.first_visible_item + f.visible_items;
                d = e - f.items_num;
                if ((e >= f.items_num) && !f.loopingLeft) {
                    f.loopItemRight(d)
                } else {
                    if (f.loopingLeft) {
                        f.rewindItemLeft(0)
                    } else {
                        f.animating = true;
                        a("ul", f.container).animate({
                            left: "-=" + f.image_outer_width
                        }, f.options.duration, function () {
                            f.animating = false
                        });
                        f.first_visible_item++
                    }
                }
                if (f.loopingLeft) {
                    c = f.current_active + 1
                } else {
                    c = f.current_active + 1
                }
                f.setActive(a("li", f.container).eq(c))
            }
        },
        event_autoscroll: function (c) {
            var d = false;
            if (c.video_type == "jwplayer") {
                if (a(".active.video-container", c.container).length) {
                    var e = a(".active.video-container div", c.container).attr("id");
                    d = (jwplayer(e).getState() == "PLAYING" || jwplayer(e).getState() == "BUFFERING");
                    if (c.options.video_autoplay && !c.videoReady) {
                        d = true
                    }
                    window.console && console.log && console.log("Video state: " + jwplayer(e).getState() + " " + e)
                }
            }
            if (!c.pause_autoscroll && !d) {
                if (c.autoscroll_direction === "left") {
                    c.do_moveRight()
                } else {
                    c.do_moveLeft()
                }
            }
        },
        event_clickItem: function (c) {
            var d = this,
                f = c.data,
                g, e;
            if (!a(d).hasClass("active")) {
                f.setActive(d);
                c.preventDefault()
            }
        },
        event_clickItemOverlay: function (d) {
            var c = a(this).parents("li"),
                f = d.data,
                g, e;
            if (!a(c).hasClass("active")) {
                f.setActive(c);
                d.preventDefault()
            }
        },
        event_clickControlLeft: function (c) {
            var d = c.data;
            d.do_moveLeft();
            c.preventDefault()
        },
        event_clickControlRight: function (c) {
            var d = c.data;
            d.do_moveRight();
            c.preventDefault()
        },
        event_mouseoverItem: function (c) {
            var d = c.data;
            d.pause_autoscroll = true
        },
        event_mouseoutItem: function (c) {
            var d = c.data;
            d.pause_autoscroll = false
        },
        event_timeout_clickLeft: function (c, d) {
            a(".carousel-nav .control.left", c.container).click();
            if (d > 1) {
                setTimeout(function () {
                    c.event_timeout_clickLeft(c, d - 1)
                }, 500)
            }
        },
        event_timeout_clickRight: function (c, d) {
            a(".carousel-nav .control.right", c.container).click();
            if (d > 1) {
                setTimeout(function () {
                    c.event_timeout_clickRight(c, d - 1)
                }, 500)
            }
        }
    })
})(jQuery);